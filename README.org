* Python

Repo containing python scripts and stuff.

** Resources
- [[https://python.swaroopch.com/][A Byte of Python]]
- [[https://docs.python.org/3/tutorial/index.html][python.org]]
- [[https://amaral.northwestern.edu/resources/guides/pyenv-tutorial][Installing pyenv]]
** Data Structures

*** Lists

Pretty much like ruby's arrays.

#+BEGIN_SRC python :results output
list = ["a", "b", "c", "d"]

# accessing elements
list[0]

# adding elements
list.append("e")

#+END_SRC

Python is not as object-oriented as ruby, so you have to use function to work on lists.

#+NAME: list-of-numbers
#+BEGIN_SRC python
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#+END_SRC

#+BEGIN_SRC python :results output :noweb yes
<<list-of-numbers>>
#             __________________ lambda expression!
even = filter(lambda x: x%2 == 0, numbers)
print(even)
#+END_SRC 

#+RESULTS:
: [2, 4, 6, 8, 10]

**** Methods
- append()	
- extend(iterable) :: appends items from an iterable.
  #+BEGIN_SRC python :results output :noweb yes
  <<list-of-numbers>>
  numbers.extend([11,12,13])
  print(numbers)
  #+END_SRC

  #+RESULTS:
  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

- insert(x,y)
  #+BEGIN_SRC python :results output :noweb yes
    <<list-of-numbers>>
    index = 0
    value = 999
    numbers.insert(index, value)
    print(numbers)
  #+END_SRC

  #+RESULTS:
  : [999, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

- remove(value)
*Returns an error if there is no such item.*
  #+BEGIN_SRC python :results output :noweb yes
    <<list-of-numbers>>
    numbers.remove(5)
    numbers.remove(6)
    numbers.remove(7)
    print(numbers)
  #+END_SRC

  #+RESULTS:
  : [1, 2, 3, 4, 8, 9, 10]

- pop([value])
Removes item at the given position and returns it.
If no value is given, it returns the last element and removes it.
See note on optional parameters

  #+BEGIN_SRC python :results output :noweb yes
  #+END_SRC
** Lambdas

#+BEGIN_SRC python :results output
l = lambda var : var * var
print(l(5))
#+END_SRC

** Tools

- [[https://github.com/proofit404/anaconda-mode][anaconda-mode]] :: Code navigation, documentation lookup and completion for Python.
- IPython ::  Pry for python
  pip install ipython

  #+BEGIN_SRC python
  from IPython import embed
  embed()
  #+END_SRC
- [[https://github.com/prompt-toolkit/ptpython][ptpython]] :: Nice REPL for python
#+BEGIN_SRC sh
pip install ptpython
#+END_SRC

- pyenv :: python version management tool. Equivalent of rbenv.
- [[https://github.com/proofit404/anaconda-mode][anaconda-mode]] :: Code navigation, documentation lookup and completion for Python.
** Terms and language specific 

- <<<optional parameters>>> :: Brackets in method signatures denote that the value is in the bracket is optional.
- Iterator :: an object that can be iterated upon. EG lists, tuples, strings.
An iterator must implement the methods __iter__() and __next__()



** Data Structures and Algorithms in Python
*** Chapter 4 Recursion
#+BEGIN_SRC python :results output
def factorial(x):
    if x == 0:
        return 1
    else:
        return x * factorial(x - 1)

print(factorial(3))
#+END_SRC

#+RESULTS:
: 6





** Sample code

*** Shortest range in k sorted lists
Given k sorted lists of integers of size n each, find the smallest range that
includes at least one element from each of the k lists.
If more than one smallest ranges are found, print any one of them.
#+BEGIN_SRC python :results output
    list1 = [4, 10, 15, 24]
    list2 = [0,  9, 12, 20]
    list3 = [5, 18, 22, 30]

          for numbers in a:
              min 
#+END_SRC


*** Heap
#+BEGIN_SRC python :results output
  class MyHeap:
      def __init__(self, lst):
          self.heap = [0]
          self.heap = self.heap.append(lst)

      def heap:
          return heap;

      def left_index(self, index):
          return 2 * index

      def right_index(self, index):
          return 2*index + 1

      def parent_index(self, index):
          return (index/2) + 1

      def swap(self, index1, index2):
          temp = self.heap[index1]
          sh
#+END_SRC
* The Zen of Python

Beautiful is better than ugly.

Explicit is better than implicit.

Simple is better than complex.

Complex is better than complicated.

Flat is better than nested.

Sparse is better than dense.

Readability counts.

Special cases aren't special enough to break the rules.

Although practicality beats purity.

Errors should never pass silently.

Unless explicitly silenced.

In the face of ambiguity, refuse the temptation to guess.

There should be one-- and preferably only one --obvious way to do it.

Although that way may not be obvious at first unless you're Dutch.

Now is better than never.

Although never is often better than *right* now.

If the implementation is hard to explain, it's a bad idea.

If the implementation is easy to explain, it may be a good idea.

Namespaces are one honking great idea -- let's do more of those!

